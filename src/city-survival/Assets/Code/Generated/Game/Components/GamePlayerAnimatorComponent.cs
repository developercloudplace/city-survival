//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Code.Gameplay.Features.Player;

public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlayerAnimator;

    public static Entitas.IMatcher<GameEntity> PlayerAnimator {
        get {
            if (_matcherPlayerAnimator == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlayerAnimator);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlayerAnimator = matcher;
            }

            return _matcherPlayerAnimator;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PlayerAnimatorComponent playerAnimator { get { return (PlayerAnimatorComponent)GetComponent(GameComponentsLookup.PlayerAnimator); } }
    public Code.Gameplay.Features.Player.Behaviours.PlayerAnimator PlayerAnimator { get { return playerAnimator.Value; } }
    public bool hasPlayerAnimator { get { return HasComponent(GameComponentsLookup.PlayerAnimator); } }

    public GameEntity AddPlayerAnimator(Code.Gameplay.Features.Player.Behaviours.PlayerAnimator newValue) {
        var index = GameComponentsLookup.PlayerAnimator;
        var component = (PlayerAnimatorComponent)CreateComponent(index, typeof(PlayerAnimatorComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplacePlayerAnimator(Code.Gameplay.Features.Player.Behaviours.PlayerAnimator newValue) {
        var index = GameComponentsLookup.PlayerAnimator;
        var component = (PlayerAnimatorComponent)CreateComponent(index, typeof(PlayerAnimatorComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemovePlayerAnimator() {
        RemoveComponent(GameComponentsLookup.PlayerAnimator);
        return this;
    }
}
